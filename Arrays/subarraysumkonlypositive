Given an array containing N integers and an integer K., Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value K.
Example 1:
 

Input :
A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.

Solution 1:
maxi=0
for i in range(n):
    s=0
    for j in range(i,n):
        s+=arr[j]
        if s==k:
            maxi=max(maxi,j-i+1)
return maxi
o(n2)
---------------------------------------------

Solution 2:
n = len(a) # size of the array.
preSumMap = {}
Sum = 0
maxLen = 0
for i in range(n):
    # calculate the prefix sum till index i:
    Sum += a[i]
    # if the sum = k, update the maxLen:
    if Sum == k:
        maxLen = max(maxLen, i + 1)
    # calculate the sum of remaining part i.e. x-k:
    rem = Sum - k
    # Calculate the length and update maxLen:
    if rem in preSumMap:
        length = i - preSumMap[rem]
        maxLen = max(maxLen, length)
    # Finally, update the map checking the conditions:
    if Sum not in preSumMap:
        preSumMap[Sum] = i
return maxLen
ordered map-o(nlogn) unordered-(o(n))
------------------------------------------------------
Solution 3:
l=0
right=0
maxi=0
sum=arr[0]
while right<n:
    while l<=right and sum>k:
        sum-=arr[l]
        l+=1
    if sum==k:
        maxi=max(maxi,right-l+1)
    right+=1
    if right<n:
        sum+=arr[right]
return maxi
space-o(1)
time-o(2*n) n for each pointer 
